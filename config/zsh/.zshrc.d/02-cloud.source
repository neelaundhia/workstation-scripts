# =============================================================================
# Cloud Tools Configuration
# =============================================================================
# This file contains configurations for various cloud platforms
# including AWS, Azure, and Google Cloud.
# =============================================================================

# =============================================================================
# AWS CLI Configuration
# =============================================================================
if command -v aws >/dev/null 2>&1; then
    # Add auto-completion for AWS CLI
    if [[ -f ~/bin/aws_completer ]]; then
        complete -C '~/bin/aws_completer' aws
    elif command -v aws_completer >/dev/null 2>&1; then
        complete -C aws_completer aws
    fi
    
    # AWS CLI Aliases
    alias asl="aws sso login --profile"
    alias aws-whoami="aws sts get-caller-identity"
    alias aws-regions="aws ec2 describe-regions --query 'Regions[].RegionName' --output table"
    alias aws-account="aws sts get-caller-identity --query 'Account' --output text"
    
    # AWS SSO helpers
    alias aws-login="aws sso login"
    alias aws-logout="aws sso logout"
    
    # AWS ECR helpers
    alias aws-ecr-login="aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin"
    
    # AWS S3 helpers
    alias s3ls="aws s3 ls"
    alias s3cp="aws s3 cp"
    alias s3sync="aws s3 sync"
    alias s3rm="aws s3 rm"
    
    # AWS CloudFormation helpers
    alias cfn-ls="aws cloudformation list-stacks --query 'StackSummaries[?StackStatus!=\`DELETE_COMPLETE\`].{Name:StackName,Status:StackStatus}' --output table"
    alias cfn-events="aws cloudformation describe-stack-events --stack-name"
    
    # AWS Lambda helpers
    alias lambda-ls="aws lambda list-functions --query 'Functions[].{Name:FunctionName,Runtime:Runtime,Memory:MemorySize}' --output table"
    
    # Function to switch AWS profiles
    aws-profile() {
        if [[ -z "$1" ]]; then
            echo "Current AWS profile: ${AWS_PROFILE:-default}"
            echo "Available profiles:"
            grep -E "^\[profile " ~/.aws/config 2>/dev/null | sed 's/\[profile //;s/\]//' || echo "No profiles found"
        else
            export AWS_PROFILE="$1"
            echo "Switched to AWS profile: $1"
            aws-whoami
        fi
    }
    
    # Function to get AWS resource costs
    aws-costs() {
        if [[ -z "$1" ]]; then
            echo "Usage: aws-costs <start-date> [end-date]"
            echo "Example: aws-costs 2025-01-01 2025-01-31"
            return 1
        fi
        
        local start_date="$1"
        local end_date="${2:-$(date +%Y-%m-%d)}"
        
        aws ce get-cost-and-usage \
            --time-period Start="$start_date",End="$end_date" \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE
    }
    
else
    echo "AWS CLI not found. Install it to use AWS-related aliases and functions."
fi

# =============================================================================
# Azure CLI Configuration
# =============================================================================
if command -v az >/dev/null 2>&1; then
    # Azure CLI completion
    if [[ -f /usr/share/bash-completion/completions/az ]]; then
        source /usr/share/bash-completion/completions/az
    fi
    
    # Azure CLI Aliases
    alias az-login="az login"
    alias az-logout="az logout"
    alias az-account="az account show"
    alias az-subscription="az account subscription list"
    alias az-resource-groups="az group list --output table"
    alias az-vms="az vm list --output table"
    alias az-aks="az aks list --output table"
    
    # Function to switch Azure subscriptions
    az-sub() {
        if [[ -z "$1" ]]; then
            echo "Current subscription:"
            az account show --query "{Name:name,ID:id}" --output table
            echo ""
            echo "Available subscriptions:"
            az account list --query "[].{Name:name,ID:id,Default:isDefault}" --output table
        else
            az account set --subscription "$1"
            echo "Switched to subscription: $1"
            az account show --query "{Name:name,ID:id}" --output table
        fi
    }
    
    # Function to get Azure resource costs
    az-costs() {
        if [[ -z "$1" ]]; then
            echo "Usage: az-costs <start-date> [end-date]"
            echo "Example: az-costs 2025-01-01 2025-01-31"
            return 1
        fi
        
        local start_date="$1"
        local end_date="${2:-$(date +%Y-%m-%d)}"
        
        az consumption usage list \
            --start-date "$start_date" \
            --end-date "$end_date" \
            --output table
    }
    
else
    echo "Azure CLI not found. Install it to use Azure-related aliases and functions."
fi

# =============================================================================
# Google Cloud Configuration
# =============================================================================
if command -v gcloud >/dev/null 2>&1; then
    # Google Cloud completion
    if [[ -f /usr/share/bash-completion/completions/gcloud ]]; then
        source /usr/share/bash-completion/completions/gcloud
    fi
    
    # Google Cloud Aliases
    alias gcp-login="gcloud auth login"
    alias gcp-logout="gcloud auth revoke"
    alias gcp-config="gcloud config list"
    alias gcp-projects="gcloud projects list"
    alias gcp-instances="gcloud compute instances list"
    alias gcp-clusters="gcloud container clusters list"
    
    # Function to switch Google Cloud projects
    gcp-project() {
        if [[ -z "$1" ]]; then
            echo "Current project:"
            gcloud config get-value project
            echo ""
            echo "Available projects:"
            gcloud projects list --format="table(projectId,name)"
        else
            gcloud config set project "$1"
            echo "Switched to project: $1"
            gcloud config get-value project
        fi
    }
    
    # Function to get Google Cloud costs
    gcp-costs() {
        if [[ -z "$1" ]]; then
            echo "Usage: gcp-costs <start-date> [end-date]"
            echo "Example: gcp-costs 2025-01-01 2025-01-31"
            return 1
        fi
        
        local start_date="$1"
        local end_date="${2:-$(date +%Y-%m-%d)}"
        
        gcloud billing accounts list
        echo "Use the billing account ID above with:"
        echo "gcloud billing accounts list --billing-account=<BILLING_ACCOUNT_ID>"
    }
    
else
    echo "Google Cloud CLI not found. Install it to use GCP-related aliases and functions."
fi

# =============================================================================
# Terraform Configuration
# =============================================================================
if command -v terraform >/dev/null 2>&1; then
    # Terraform Aliases
    alias tf="terraform"
    alias tf-init="terraform init"
    alias tf-plan="terraform plan"
    alias tf-apply="terraform apply"
    alias tf-destroy="terraform destroy"
    alias tf-output="terraform output"
    alias tf-state="terraform state"
    alias tf-workspace="terraform workspace"
    
    # Function to switch Terraform workspaces
    tf-ws() {
        if [[ -z "$1" ]]; then
            echo "Current workspace:"
            terraform workspace show
            echo ""
            echo "Available workspaces:"
            terraform workspace list
        else
            terraform workspace select "$1"
            echo "Switched to workspace: $1"
        fi
    }
    
else
    echo "Terraform not found. Install it to use Terraform-related aliases and functions."
fi

# =============================================================================
# OpenTofu Configuration
# =============================================================================
if command -v tofu >/dev/null 2>&1; then
    # OpenTofu Aliases
    alias tofu-init="tofu init"
    alias tofu-plan="tofu plan"
    alias tofu-apply="tofu apply"
    alias tofu-destroy="tofu destroy"
    alias tofu-output="tofu output"
    alias tofu-state="tofu state"
    alias tofu-workspace="tofu workspace"
    
    # Function to switch OpenTofu workspaces
    tofu-ws() {
        if [[ -z "$1" ]]; then
            echo "Current workspace:"
            tofu workspace show
            echo ""
            echo "Available workspaces:"
            tofu workspace list
        else
            tofu workspace select "$1"
            echo "Switched to workspace: $1"
        fi
    }
    
else
    echo "OpenTofu not found. Install it to use OpenTofu-related aliases and functions."
fi 